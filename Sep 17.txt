jsp 는 모든 페이지가 다 따로 쪼개서 구현한다
모든 쪼개진 페이지는 헤더에 추가하는거로 구현한다.

이 방식의 장점은 
 
무엇인가 추가되거나 삭제할때 헤더에서 추가 삭제하는거로 관리가 된다
왜? 헤더를 공통헤더로 설정해서 공유하기때문


html은 이방식이 안됨


가장 안에꺼 눌러서 뒤가 다눌리면 버블링

가장 밖에꺼 눌러서 안에꺼 다 눌리면 캡처링

iframe 해킹에 취약해서 쓰면 안된다. 잘 안쓰인다(창안에 창을 만드는것)

과거 서버가 성능 압도적이었지만 현재는 
인터넷 속도 발전과 개인 컴퓨팅 성능 증가로인해 싱글 페이지 어플리케이션이 쓰일수 있게 되었다

동기식 전송 방식은 post get 뿐이다.

fieldset ui예쁘게 만들어줌

name <- 서버에서 데이터받는데 필요함 비동기식
id or class <- 클라이언트에서 사용

html자체에서 속성 maxlength 같이 제한 가능 자바스크립트 없이

readonly 쓸수 없다 하지만 커서는 올려짐
	서버쪽에 데이터 전송 가능

disabled 쓸수없다 커서도 안올라감
	서버쪽에 데이터 전송 불가
	
readonly = "readonly" 이러던게
readonly, disabled 만쓰는거로 바뀜

checkbox 

html자체에서 정규 표현식으로 입력값 규제가 가능

margin: auto  자동정렬 효과됨

반응형 화면크기에 따라 달라짐

미디어쿼리 조건절(if문)로 적용됨 화면크기에 따라서 레이아웃 결정된걸 불러온다.

display:none 숨길시 공간삭제
visibility:hidden 숨겨도 공간 공백으로 냅둠

sax <-> DOM 
sax 제어가 어려워서 현재는 사용하지 않는다.


호이스팅
"변수와 함수 선언이 코드의 최상단으로 끌어올려지는 것처럼 동작하는 JavaScript의 특징

JavaScript 호이스팅은 인터프리터가 코드를 실행하기 전에 함수, 변수, 클래스 또는 임포트(import)의 선언문을 
해당 범위의 맨 위로 끌어올리는 것처럼 보이는 현상을 뜻합니다
console.log(x); // undefined
var x = 5;

console.log(x) 전에 x가 선언되지 않았는데도 에러가 나지 않고 undefined가 출력
변수 호이스팅
var는 선언만 끌어올려지고, 초기화는 호이스팅되지 않음

console.log(a); // undefined
var a = 10;

내부적으로 해석되는 코드는********************************
var a;        // 선언이 먼저 올라감
console.log(a); // undefined
a = 10;
let과 const는 호이스팅되지만 초기화 전에 접근 불가

console.log(b); // ReferenceError 발생
let b = 20;
var	        선언만 O	선언 전 접근 가능	       undefined 반환
let / const	선언만 O	선언 전 접근 불가능      	ReferenceError

let const는 호이스팅안된다.


-----------------------------------------------------------
JavaScript에서 익명 함수(anonymous function)는 이름이 없는 함수로, 
주로 콜백 함수나 즉시 실행 함수, 변수에 할당된 함수 등에 사용
const sayHello = function() {
  console.log("Hello, world!");
};
sayHello();  // 출력: Hello, world!


const sayHi = () => {
  console.log("Hi there!");
};
sayHi();  // 출력: Hi there!
 이벤트 핸들러로 사용

document.getElementById("myBtn").addEventListener("click", function() {
  alert("버튼이 클릭되었습니다!");
});
배열 메서드에서 콜백으로 사용

const numbers = [1, 2, 3, 4, 5];
const squared = numbers.map(function(num) {
  return num * num;
});
console.log(squared);  // [1, 4, 9, 16, 25]
즉시 실행 함수

(function() {
  console.log("이 함수는 바로 실행됩니다!");
})();
setTimeout / setInterval

setTimeout(function() {
  console.log("3초 후 실행됨");
}, 3000);
​